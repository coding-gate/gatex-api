jwt.symmetric.signing.key=${SIGNING_KEY}
admin.account.key=${APP_KEY}
spring.data.mongodb.uri=mongodb+srv://${USER}:${PWD}@cluster0.kawbc.mongodb.net/${DB_NAME}?retryWrites=true&w=majority


java.answer=public class Answer {\r\n\t\r\n\tpublic int findLength(String str){\r\n\r\n\t\tSystem.out.println(\"Hello world\");\r\n\r\n\t\treturn str.length();\r\n\t}\r\n\r\n}\r\n
java.unittest=import static org.junit.Assert.assertEquals;\r\n\r\nimport org.junit.Test;\r\n\r\npublic class UnitTest {\r\n\t\r\n\tAnswer ans=new Answer();\r\n\t\r\n\t@Test\r\n\tpublic void sucessTest(){\r\n\t\tassertEquals(2, ans.findLength(\"ab\"));\r\n\t}\r\n\t\r\n\t@Test\r\n\tpublic void failureTest(){\r\n\t\tassertEquals(3, ans.findLength(\"abcd\"));\r\n\t}\r\n\t\r\n\t@Test(expected=NullPointerException.class)\r\n\tpublic void nullPointerTest(){\r\n\t\tassertEquals(3, ans.findLength(null));\r\n\t}\r\n\t\r\n\t@Test(timeout=10)\r\n\tpublic void performanceTest(){\r\n\t\tassertEquals(3, ans.findLength(\"abc\"));\r\n\t}\r\n\r\n\r\n}\r\n

python.answer=def avg(a,b): \r\n  return (a+b)/2;\r\n
python.unittest=import unittest\r\nfrom answer import avg\r\n \r\nclass TestUM(unittest.TestCase):\r\n \r\n    def setUp(self):\r\n        pass\r\n \r\n    def test_avg_2_4(self):\r\n        self.assertEqual(avg(2,4), 3)\r\n \r\n    def test_avg_2_3(self):\r\n        self.assertEqual( avg(2,3), 5)\r\n \r\nif __name__ == '__main__':\r\n    unittest.main()\r\n

csharp.answer=using System;\r\n\t\r\n\tpublic class Answer {\r\n\r\n\t\tpublic int add(int num1, int num2)  \r\n\t\t{  \r\n\t\t\treturn num1 + num2;  \r\n\t\t}  \r\n\t\t\r\n\t}
csharp.unittest=using System;\r\nusing Xunit;\r\n\r\n\r\n     public class AnswerTest{\r\n\t\r\n\t    Answer answer = new Answer();\r\n\t\r\n        [Fact]\r\n        public void testAdd()\r\n        {\r\n\t    int expected = 5;\r\n        int actual = answer.add(2,3);\r\n\r\n        Assert.Equal(expected, actual);\r\n\r\n        }\r\n\t\t\r\n\t\t[Fact]\r\n        public void testAdd1()\r\n        {\r\n\t    int expected = 6;\r\n        int actual = answer.add(2,3);\r\n\r\n        Assert.Equal(expected, actual);\r\n\r\n        }\r\n    }\r\n

javascript.answer=const addNumber = function(arg1, arg2){\r\n    return (arg1+arg2);\r\n}\r\n\r\nmodule.exports=addNumber;
javascript.unittest=const addNum= require('./answer.js');\r\nvar assert = require('assert');\r\n\r\nit('test add 2+3 ', function(){\r\n  assert.equal(5, addNum(2,3));\r\n})\r\n\r\nit('test add 2+0 ', function(){\r\n  assert.equal(2, addNum(2,0));\r\n})\r\n\r\nit('test add 2-1 ', function(){\r\n  assert.equal(1, addNum(2,-1));\r\n})\r\n\r\nit('test add 3+3 ', function(){\r\n  assert.equal(7, addNum(3,3));\r\n})
